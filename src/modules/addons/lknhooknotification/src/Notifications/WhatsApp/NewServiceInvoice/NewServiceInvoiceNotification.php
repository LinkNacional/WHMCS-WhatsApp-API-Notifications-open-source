<?php

/**
 * Code: NewServiceInvoice
 */

namespace Lkn\HookNotification\Notifications\WhatsApp\NewServiceInvoice;

use Lkn\HookNotification\Config\Hooks;
use Lkn\HookNotification\Config\ReportCategory;
use Lkn\HookNotification\Domains\Platforms\WhatsApp\AbstractWhatsAppNotifcation;

/**
 * Runs when a recurring existing service invoice is created.
 *
 * @since 3.2.0
 */
final class NewServiceInvoiceNotification extends AbstractWhatsAppNotifcation
{
    public string $notificationCode = 'NewServiceInvoice';

    /**
     * @var \Lkn\HookNotification\Config\Hooks|array|null
     * @link https://developers.whmcs.com/hooks-reference/cron/#dailycronjob
     */
    public Hooks|array|null $hook = Hooks::INVOICE_CREATED;

    public function run(): bool
    {
        if (!$this->mustRun()) {
            $this->events = [];
            $this->enableAutoReport = false;

            return false;
        }

        // Setup properties for reporting purposes (not required).
        $this->setReportCategory(ReportCategory::INVOICE);
        $this->setReportCategoryId($this->hookParams['invoiceid']);

        // Setup client ID for getting its WhatsApp number (required).
        $clientId = $this->getClientIdByInvoiceId($this->hookParams['invoiceid']);

        $this->setClientId($clientId);
        // Send the message and get the raw response (converted to array) from WhatsApp API.
        $response = $this->sendMessage();

        // Defines if response tells if the message was sent successfully.
        $success = isset($response['messages'][0]['id']);

        return $success;
    }

    /**
     * This method checks if the invoice refers to a active service of the client.
     *
     * @return bool
     */
    private function mustRun(): bool
    {
        $invoiceId = $this->hookParams['invoiceid'];

        // Checks if the invoice was generated by the CRON.
        if ($this->hookParams['source'] !== 'autogen' || $this->hookParams['user'] !== 'system') {
            return false;
        }

        // Invoices of orders does not count.
        if (is_int(self::getOrderIdByInvoiceId($invoiceId))) {
            return false;
        }

        $invoiceItems = self::getInvoiceItems($invoiceId);

        echo '<pre>invoiceItems:';
        print_r($invoiceItems);
        echo '</pre><hr>';

        $invoiceItem = array_filter($invoiceItems, function (array $item): bool {
            return !empty($item['product_id']);
        });

        if (count($invoiceItem) === 0) {
            return false;
        }

        // Loops over each item on the invoice to check if any item is a service with nextduedate for today.
        foreach ($invoiceItem as $item) {
            $productsInfo = localAPI('GetClientsProducts', [
                'pid' => $item['product_id'],
                'serviceid' => $item['relid'],
                'clientid' => self::getClientIdByInvoiceId($invoiceId)
            ])['products']['product'];

            $productsDueToday = array_filter($productsInfo, function (array $clientProduct): bool {
                /**
                 * Acordding to https://docs.whmcs.com/Billing_Logic
                 * Next Due Date/Next Invoice Date is updated after WHMCS triggers InvoiceCreated hook.
                 */
                echo '<pre>clientProduct:';
                print_r($clientProduct);
                echo '</pre><hr>';
                exit;
                return $clientProduct['nextduedate'] === date('Y-m-d');
            });

            if (count($productsDueToday) > 0) {
                return true;
            }
        }

        return false;
    }

    public function defineParameters(): void
    {
        $this->parameters = [
            'invoice_id' => [
                'label' => $this->lang['invoice_id'],
                'parser' => fn () => $this->reportCategoryId
            ],
            'invoice_items' => [
                'label' => $this->lang['invoice_items'],
                'parser' => fn () => self::getOrderItemsDescripByOrderId($this->reportCategoryId)
            ],
            'invoice_due_date' => [
                'label' => $this->lang['invoice_due_date'],
                'parser' => fn () => self::getInvoiceDueDateByInvoiceId($this->reportCategoryId)
            ],
            'client_id' => [
                'label' => $this->lang['client_id'],
                'parser' => fn () => $this->clientId
            ],
            'client_first_name' => [
                'label' => $this->lang['client_first_name'],
                'parser' => fn () => $this->getClientFirstNameByClientId($this->clientId)
            ],
            'client_full_name' => [
                'label' => $this->lang['client_full_name'],
                'parser' => fn () => $this->getClientFullNameByClientId($this->clientId)
            ]
        ];
    }
}
